        -:    0:Source:unit_test/src/calculate_test.c
        -:    0:Graph:calculate_test.gcno
        -:    0:Data:calculate_test.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* ************************************************************************** */
        -:    2:/*                                                                            */
        -:    3:/*                                                        :::      ::::::::   */
        -:    4:/*   unit_test.c                                        :+:      :+:    :+:   */
        -:    5:/*                                                    +:+ +:+         +:+     */
        -:    6:/*   By: safoh <safoh@student.codam.nl>             +#+  +:+       +#+        */
        -:    7:/*                                                +#+#+#+#+#+   +#+           */
        -:    8:/*   Created: 2022/05/26 16:46:15 by safoh             #+#    #+#             */
        -:    9:/*   Updated: 2022/05/30 23:43:09 by safoh            ###   ########.fr       */
        -:   10:/*                                                                            */
        -:   11:/* ************************************************************************** */
        -:   12:
        -:   13:#include "unit_test.h"
        -:   14:
        -:   15:
        -:   16:// double ft_pow(double x, double y)
        -:   17:// {
        -:   18:// 	return (x * y);
        -:   19:// }
        -:   20:
        -:   21:// void	tester(double x, double y, double expected)
        -:   22:// {
        -:   23:// 	double submitted;
        -:   24:// 	submitted = ft_pow(x, y);
        -:   25:// 	cr_assert(submitted == expected,
        -:   26:// 		"Submitted:\t%f for %f to the power of %f\nExpected:\t%f\n",
        -:   27:// 		submitted, x, y, expected
        -:   28:// 		);
        -:   29:// }
        -:   30:
        -:   31:// Test(Example_Tests, should_pass_all_tests_provided)
        -:   32:// {
        -:   33:// 	tester(1.0, 1.0, 1.0);
        -:   34:// }
        -:   35:
        -:   36:int calculate(unsigned int *arr, int count);
        -:   37:
        2:   38:void test_calculate(unsigned int *arr, int count, int expected)
        -:   39:{
        -:   40:	int submitted;
        2:   41:	submitted = calculate(arr, count);
        2:   42:	cr_assert(submitted == expected,
        -:   43:		"Submitted:\t%i with arguments arr: %p, count: %i\nExpected:\t%i\n",
        -:   44:		submitted, arr, count, expected
        -:   45:		);
        2:   46:}
        -:   47:
        2:   48:Test(foo, calculate)
        -:   49:{
        1:   50:	unsigned int arr[] = {1, 2, 3};
        1:   51:	int count = 3;
        -:   52:
        1:   53:	(void)arr;
        1:   54:	test_calculate(NULL, count, -1);
        -:   55:
        1:   56:	unsigned int arr2[] = {9, 0, 9, 0, 9, 0, 9, 0, 9, 0, 9, 0, 9, 0, 9, 0, 9, 0, 9, 0};
        1:   57:	test_calculate(arr2, 20, 90);
        1:   58:}
